{"version":3,"sources":["modals/checkoutModal.js","shoppingCart/ShoppingCart.jsx","api/apiCall.js","App.js","reportWebVitals.js","serviceWorker.js","index.js"],"names":["CheckoutModal","this","props","showModal","className","style","transform","opacity","children","Component","ShoppingCart","setCountProduct","data","countProduct","products","map","item","id","count","price","console","log","setState","updateCounts","action","countProductArr","state","totalCount","totalPrice","index","findIndex","el","getProductCount","updateCheckout","ischeckout","showProducts","src","imageUrl","alt","offerText","brandName","productName","quantity","mrp","onClick","bind","process","fetch","headers","then","response","json","catch","error","toFixed","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","StrictMode","document","getElementById","URL","href","origin","addEventListener","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.2a7cdbfd.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react';\r\nimport './checkoutModal.css';\r\n\r\nclass CheckoutModal extends Component{\r\n    render(){\r\n        return (\r\n            <Fragment>\r\n                {this.props.showModal && <div className='Backdrop'></div>}\r\n                <div className='Modal'\r\n                    style={{\r\n                        transform: this.props.showModal ? 'translateY(0)' : 'translateY(100vh)',\r\n                        opacity: this.props.showModal ? '1' : '0'\r\n                    }}>\r\n                    {this.props.children}\r\n                </div>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default CheckoutModal;","import React, { Component } from 'react';\r\nimport {getProducts} from '../api/apiCall';\r\nimport CheckoutModal from '../modals/checkoutModal';\r\nimport './ShoppingCart.css';\r\n\r\nexport default class ShoppingCart extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state= {\r\n            products: [],\r\n            countProduct:[],\r\n            totalCount: 0,\r\n            totalPrice: 0,\r\n            ischeckout: false,\r\n        };\r\n        this.showProducts = this.showProducts.bind(this);\r\n        this.setCountProduct = this.setCountProduct.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n        console.log(process.env.NODE_ENV);\r\n        getProducts().then(response => response.json())\r\n        .then(data => {\r\n          console.log('Success:', data);\r\n          this.setCountProduct(data);\r\n          this.setState({products: data.products});\r\n        })\r\n        .catch((error) => {\r\n          console.error('Error:', error);\r\n        });\r\n    }\r\n\r\n    setCountProduct = (data) =>{\r\n        let countProduct = data.products.map(item =>{\r\n            return {\r\n                id: item.id,\r\n                count: 0,\r\n                price: item.price\r\n            }\r\n        });\r\n        console.log('count data',countProduct);\r\n        this.setState({countProduct: countProduct});\r\n    }\r\n\r\n    updateCounts = (id, action) => {\r\n        let countProductArr = [...this.state.countProduct];\r\n        let totalCount = this.state.totalCount;\r\n        let totalPrice = this.state.totalPrice;\r\n        const index = countProductArr.findIndex(el => el.id === id);\r\n        if(action === 'add'){\r\n            countProductArr[index].count += 1;\r\n            totalCount += 1;\r\n            totalPrice += countProductArr[index].price;\r\n        }else if (action==='remove' &&countProductArr[index].count > 0){\r\n            countProductArr[index].count -= 1;\r\n            totalCount -= 1;\r\n            totalPrice -= countProductArr[index].price;\r\n            console.log(this.state.countProduct);\r\n        }else if( action ==='addToCart' && countProductArr[index].count === 0){\r\n            countProductArr[index].count += 1;\r\n            totalCount += 1;\r\n            totalPrice += countProductArr[index].price;\r\n        }\r\n        if(totalPrice >= 0 && totalCount >=0 && countProductArr[index].count>=0){\r\n            console.log('state updated');\r\n            this.setState({\r\n                countProduct: countProductArr,\r\n                totalCount : totalCount,\r\n                totalPrice : totalPrice\r\n            })\r\n        }\r\n        console.log(countProductArr, this.state.countProduct, countProductArr[index].count);\r\n    }\r\n\r\n    getProductCount = (id) => {\r\n        const index = this.state.countProduct.findIndex(el => el.id === id);\r\n        return this.state.countProduct[index].count;\r\n    }\r\n    updateCheckout=()=>{\r\n        this.setState({ischeckout: !this.state.ischeckout})\r\n    }\r\n\r\n    showProducts = () =>{\r\n        return this.state.products\r\n        .map(item => {\r\n            return (<div className=\"gridContainer\">\r\n                <div>\r\n                    <img src={item.imageUrl} alt='Product'></img>\r\n                    <p style={{'font-size':'larger', 'font-family':'sans-serif', 'font-ftyle':'italic'}}>{item.offerText}</p>\r\n                </div>\r\n                <div>\r\n                    <p className='Brand'>{item.brandName}</p>\r\n                    <p style={{'font-style': 'italic'}}>{item.productName}</p>\r\n                    <p>{item.quantity}</p>\r\n                    <p>MRP ₹{item.mrp}</p>\r\n                    <p style={{'font-weight':'bold'}}>₹{item.price}</p>\r\n                    <div className='addCart'>\r\n                        <button className='checkoutbtn' onClick={()=>{this.updateCounts(item.id,'addToCart')}}>Add To Cart</button>\r\n                        <span onClick={()=>this.updateCounts(item.id,'add')} className='itemIcon'>+</span>\r\n                        <span>{this.getProductCount(item.id)}</span>\r\n                        <span onClick={()=>this.updateCounts(item.id,'remove')} className='itemIcon'>-</span> \r\n                    </div>\r\n                </div>\r\n                <hr />\r\n            </div>)\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className='main'>\r\n                    <h1>Shopping Cart</h1>\r\n                    {this.showProducts()}\r\n                </div>\r\n                <div className='footer'>\r\n                    <div className='align'>\r\n                        <p>Qty: {this.state.totalCount}</p>\r\n                        <p>Total: ₹ {this.state.totalPrice.toFixed(2)}</p>\r\n                    </div>\r\n                    <div className='buttonDiv'>\r\n                        <button className='checkoutbtn' onClick={this.updateCheckout}>Checkout</button>\r\n                    </div>\r\n                </div>\r\n                <CheckoutModal showModal={this.state.ischeckout}>\r\n                    <p className='close' onClick={this.updateCheckout}>X</p>\r\n                    <p className='infoText'>Transaction Successful !</p>\r\n                    <p className='valueText'>Total Price: ₹{this.state.totalPrice}</p>\r\n                </CheckoutModal>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","\r\nexport function getProducts() {\r\n    return fetch('products.json',{\r\n        headers: {\r\n            'CrossDomain':true,\r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json'\r\n        }\r\n    });\r\n}\r\n","import './App.css';\nimport ShoppingCart from'./shoppingCart/ShoppingCart';\nfunction App() {\n  return (\n    <div >\n      <ShoppingCart/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.1/8 is considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready.then(registration => {\r\n        registration.unregister();\r\n      });\r\n    }\r\n  }\r\n  ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}