[{"F:\\Data space\\Programing space\\React\\Mobiotics\\shopping-cart\\src\\index.js":"1","F:\\Data space\\Programing space\\React\\Mobiotics\\shopping-cart\\src\\reportWebVitals.js":"2","F:\\Data space\\Programing space\\React\\Mobiotics\\shopping-cart\\src\\App.js":"3","F:\\Data space\\Programing space\\React\\Mobiotics\\shopping-cart\\src\\serviceWorker.js":"4","F:\\Data space\\Programing space\\React\\Mobiotics\\shopping-cart\\src\\shoppingCart\\ShoppingCart.jsx":"5","F:\\Data space\\Programing space\\React\\Mobiotics\\shopping-cart\\src\\api\\apiCall.js":"6","F:\\Data space\\Programing space\\React\\Mobiotics\\shopping-cart\\src\\modals\\checkoutModal.js":"7"},{"size":784,"mtime":1608605220796,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":499162500000,"results":"10","hashOfConfig":"9"},{"size":175,"mtime":1608711699181,"results":"11","hashOfConfig":"9"},{"size":5332,"mtime":1608605195592,"results":"12","hashOfConfig":"9"},{"size":5167,"mtime":1608724899658,"results":"13","hashOfConfig":"9"},{"size":649,"mtime":1608641656152,"results":"14","hashOfConfig":"9"},{"size":665,"mtime":1608725094841,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1jcm6ew",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"F:\\Data space\\Programing space\\React\\Mobiotics\\shopping-cart\\src\\index.js",[],["32","33"],"F:\\Data space\\Programing space\\React\\Mobiotics\\shopping-cart\\src\\reportWebVitals.js",[],"F:\\Data space\\Programing space\\React\\Mobiotics\\shopping-cart\\src\\App.js",[],"F:\\Data space\\Programing space\\React\\Mobiotics\\shopping-cart\\src\\serviceWorker.js",[],"F:\\Data space\\Programing space\\React\\Mobiotics\\shopping-cart\\src\\shoppingCart\\ShoppingCart.jsx",["34","35","36","37"],"import React, { Component } from 'react';\r\nimport {getProducts} from '../api/apiCall';\r\nimport CheckoutModal from '../modals/checkoutModal';\r\nimport './ShoppingCart.css';\r\n\r\nexport default class ShoppingCart extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state= {\r\n            products: [],\r\n            countProduct:[],\r\n            totalCount: 0,\r\n            totalPrice: 0,\r\n            ischeckout: false,\r\n        };\r\n        this.showProducts = this.showProducts.bind(this);\r\n        this.setCountProduct = this.setCountProduct.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n        getProducts().then(response => response.json())\r\n        .then(data => {\r\n          console.log('Success:', data);\r\n          this.setCountProduct(data);\r\n          this.setState({products: data.products});\r\n        })\r\n        .catch((error) => {\r\n          console.error('Error:', error);\r\n        });\r\n    }\r\n\r\n    setCountProduct = (data) =>{\r\n        let countProduct = data.products.map(item =>{\r\n            return {\r\n                id: item.id,\r\n                count: 0,\r\n                price: item.price\r\n            }\r\n        });\r\n        console.log('count data',countProduct);\r\n        this.setState({countProduct: countProduct});\r\n    }\r\n\r\n    updateCounts = (id, action) => {\r\n        let countProductArr = [...this.state.countProduct];\r\n        let totalCount = this.state.totalCount;\r\n        let totalPrice = this.state.totalPrice;\r\n        const index = countProductArr.findIndex(el => el.id === id);\r\n        if(action == 'add'){\r\n            countProductArr[index].count += 1;\r\n            totalCount += 1;\r\n            totalPrice += countProductArr[index].price;\r\n        }else if (action=='remove' &&countProductArr[index].count > 0){\r\n            countProductArr[index].count -= 1;\r\n            totalCount -= 1;\r\n            totalPrice -= countProductArr[index].price;\r\n            console.log(this.state.countProduct);\r\n        }else if( action =='addToCart' && countProductArr[index].count == 0){\r\n            countProductArr[index].count += 1;\r\n            totalCount += 1;\r\n            totalPrice += countProductArr[index].price;\r\n        }\r\n        if(totalPrice >= 0 && totalCount >=0 && countProductArr[index].count>=0){\r\n            console.log('state updated');\r\n            this.setState({\r\n                countProduct: countProductArr,\r\n                totalCount : totalCount,\r\n                totalPrice : totalPrice\r\n            })\r\n        }\r\n        console.log(countProductArr, this.state.countProduct, countProductArr[index].count);\r\n    }\r\n\r\n    getProductCount = (id) => {\r\n        const index = this.state.countProduct.findIndex(el => el.id === id);\r\n        return this.state.countProduct[index].count;\r\n    }\r\n    updateCheckout=()=>{\r\n        this.setState({ischeckout: !this.state.ischeckout})\r\n    }\r\n\r\n    showProducts = () =>{\r\n        return this.state.products\r\n        .map(item => {\r\n            return (<div className=\"gridContainer\">\r\n                <div>\r\n                    <img src={item.imageUrl} alt='Product'></img>\r\n                    <p style={{'font-size':'larger', 'fontFamily':'sans-serif', 'fontStyle':'italic'}}>{item.offerText}</p>\r\n                </div>\r\n                <div>\r\n                    <p className='Brand'>{item.brandName}</p>\r\n                    <p style={{'fontStyle': 'italic'}}>{item.productName}</p>\r\n                    <p>{item.quantity}</p>\r\n                    <p>MRP ₹{item.mrp}</p>\r\n                    <p style={{'font-weight':'bold'}}>₹{item.price}</p>\r\n                    <div className='addCart'>\r\n                        <button className='checkoutbtn' onClick={()=>{this.updateCounts(item.id,'addToCart')}}>Add To Cart</button>\r\n                        <span onClick={()=>this.updateCounts(item.id,'add')} className='itemIcon'>+</span>\r\n                        <span>{this.getProductCount(item.id)}</span>\r\n                        <span onClick={()=>this.updateCounts(item.id,'remove')} className='itemIcon'>-</span> \r\n                    </div>\r\n                </div>\r\n                <hr />\r\n            </div>)\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className='main'>\r\n                    <h1>Shopping Cart</h1>\r\n                    {this.showProducts()}\r\n                </div>\r\n                <div className='footer'>\r\n                    <div className='align'>\r\n                        <p>Qty: {this.state.totalCount}</p>\r\n                        <p>Total: ₹ {this.state.totalPrice.toFixed(2)}</p>\r\n                    </div>\r\n                    <div className='buttonDiv'>\r\n                        <button className='checkoutbtn' onClick={this.updateCheckout}>Checkout</button>\r\n                    </div>\r\n                </div>\r\n                <CheckoutModal showModal={this.state.ischeckout}>\r\n                    <p class='close' onClick={this.updateCheckout}>X</p>\r\n                    <p>Transaction Successful</p>\r\n                    <p>Total Price: {this.state.totalPrice}</p>\r\n\r\n                </CheckoutModal>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","F:\\Data space\\Programing space\\React\\Mobiotics\\shopping-cart\\src\\api\\apiCall.js",[],"F:\\Data space\\Programing space\\React\\Mobiotics\\shopping-cart\\src\\modals\\checkoutModal.js",[],{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","severity":1,"message":"43","line":49,"column":19,"nodeType":"44","messageId":"45","endLine":49,"endColumn":21},{"ruleId":"42","severity":1,"message":"43","line":53,"column":25,"nodeType":"44","messageId":"45","endLine":53,"endColumn":27},{"ruleId":"42","severity":1,"message":"43","line":58,"column":26,"nodeType":"44","messageId":"45","endLine":58,"endColumn":28},{"ruleId":"42","severity":1,"message":"43","line":58,"column":72,"nodeType":"44","messageId":"45","endLine":58,"endColumn":74},"no-native-reassign",["46"],"no-negated-in-lhs",["47"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]